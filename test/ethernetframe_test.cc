#include <gtest/gtest.h>
#include <gmock/gmock.h>

#include <array>

#include "../include/ethernet-frame.hpp"

namespace {
    constexpr std::array<uint8_t, EthernetSizes::frame_max_size> buf = {
        0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xde, 0x20, 0xde, 0x20, 0x11, 0x90, 0x08, 0x06, 0x00, 0x01, 0x08, 0x00, 0x06, 0x04, 0x00, 0x01, 0xde, 0x20, 0xde, 0x20, 0x11, 0x90, 0x0a, 0x00, 0x01, 0x05, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0a, 0x00, 0x01, 0x05
    };

    constexpr int buf_len = 42;
}

TEST(EthernetframeTest, BasicAssertions) {
    EthernetFrame frame{buf, buf_len};
    const auto dst_addr = frame.dst_addr();
    const auto expected_dst_addr = MacAddr{ 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };

    EXPECT_EQ(dst_addr, expected_dst_addr);

    const auto src_addr = frame.src_addr();
    const auto expected_src_addr = MacAddr{ 0xde, 0x20, 0xde, 0x20, 0x11, 0x90 };

    EXPECT_EQ(src_addr, expected_src_addr);

    const auto ether_type = frame.ether_type();
    const auto expected_ether_type = std::array<uint8_t, 2>{ 0x08, 0x06 };

    EXPECT_EQ(ether_type, expected_ether_type);

    const auto payload = frame.payload();
    const auto expected_payload = std::vector<uint8_t>{ 0x00, 0x01, 0x08, 0x00, 0x06, 0x04, 0x00, 0x01, 0xde, 0x20, 0xde, 0x20, 0x11, 0x90, 0x0a, 0x00, 0x01, 0x05, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x0a, 0x00, 0x01, 0x05 };

    EXPECT_EQ(payload, expected_payload);

    const auto frame_bytes = frame.serialize();
    for (int i = 0; i < frame_bytes.size(); i++)
    {
        EXPECT_EQ(frame_bytes[i], buf[i]);
    }

    EXPECT_EQ(buf_len, frame_bytes.size());
}
